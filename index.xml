<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Konveyor Documentation on Documentation for Konveyor projects</title><link>http://konveyor.github.io/</link><description>Recent content in Konveyor Documentation on Documentation for Konveyor projects</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 14 Apr 2022 14:58:17 -0600</lastBuildDate><atom:link href="http://konveyor.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>http://konveyor.github.io/move2kube/overview/</link><pubDate>Fri, 08 Jul 2022 14:41:25 -0600</pubDate><guid>http://konveyor.github.io/move2kube/overview/</guid><description>The Move2Kube tool helps application owners migrate legacy workloads to run on Kubernetes clusters and eventually automate their deployments after multiple iterations. It analyzes Docker Compose files, Cloud Foundry manifest files, and even source code to generate Kubernetes deployment files including object YAML files, Helm charts, and operators.
Move2Kube has a very modular architecture making it easy to custom functionality for a large variety of migration use-cases.
The project includes three tools:</description></item><item><title>1. Collect</title><link>http://konveyor.github.io/move2kube/tutorials/cfappstok8/1collect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/cfappstok8/1collect/</guid><description>Note: This is an optional step. If you are not familiar with Cloud Foundry or you do not want to collect information from your running app, skip to Customizing the output.
To analyze the running application in Cloud Foundry (CF), the Move2Kube CLI tool provides a command called collect. As the name suggests, the collect command collects information about applications running in the cloud.
For collecting information from a CF running instance, you might require cf CLI for logging into Cloud Foundry.</description></item><item><title>Concepts</title><link>http://konveyor.github.io/move2kube/concepts/</link><pubDate>Tue, 16 Aug 2022 17:21:40 -0600</pubDate><guid>http://konveyor.github.io/move2kube/concepts/</guid><description>Move2Kube has four concepts that are useful to understand when customizing output and this section covers the more important ones.
Important: If you have not followed the tutorials, we recommend checking those out first, then coming back here to see each concept in more detail.
Artifacts Source code
Artifacts represent the application objects that can be passed between transformers.
type Artifact struct { Name string `yaml:&amp;#34;name,omitempty&amp;#34; json:&amp;#34;name,omitempty&amp;#34;` Type ArtifactType `yaml:&amp;#34;type,omitempty&amp;#34; json:&amp;#34;type,omitempty&amp;#34;` ProcessWith metav1.</description></item><item><title>2. Plan</title><link>http://konveyor.github.io/move2kube/tutorials/cfappstok8/2plan/</link><pubDate>Fri, 12 Aug 2022 12:08:16 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/cfappstok8/2plan/</guid><description>We start by planning the migration. During the plan phase, Move2Kube will analyze the files in the source directory, detect what services exist, create a plan on how to containerize them using Dockerfiles, and transform them into Kubernetes deployments, services, ingress, etc.
In order to do the planning, Move2Kube has a large number of built-in transformers for different languages and platforms. Each transformer walks through the source directory from top to bottom and tries to find files that it recognizes.</description></item><item><title>3. Transform</title><link>http://konveyor.github.io/move2kube/tutorials/cfappstok8/3transform/</link><pubDate>Fri, 12 Aug 2022 12:08:16 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/cfappstok8/3transform/</guid><description>Now we can run the transformation according to the plan file generated in the previous step. The transformation phase runs all of the transformers again, but this time the transformers will use the plan to generate the output files.
During this process, the transformers might run into situations where it requires some more information to generate the output. In order to get this information, it will ask the user some questions.</description></item><item><title>Using Move2Kube CLI</title><link>http://konveyor.github.io/move2kube/tutorials/usingcli/</link><pubDate>Thu, 04 Aug 2022 19:09:57 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/usingcli/</guid><description>In this tutorial we will see how we can transform a set of sample applications to run on Kubernetes. We will use the Move2Kube CLI tool to generate the Kubernetes YAMLs, Dockerfiles, and build scripts for each application. We will then build the container images and deploy them to a cluster.
Prerequisites Install the Move2Kube CLI tool.
We will use language-platforms sample. The language-platforms directory has a combination of multiple applications in different languages (Java, Go, Python, Ruby, etc.</description></item><item><title>Using Move2Kube UI</title><link>http://konveyor.github.io/move2kube/tutorials/usingui/</link><pubDate>Thu, 04 Aug 2022 19:10:11 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/usingui/</guid><description>Similar to the command line tool, the Move2Kube Web-UI can also perform the transformation with all the capabilities that are in the command line tool. This document explains the steps to bring up the UI and backend using Docker and use it for transformation.
Prerequisites Install Docker.
We will use language-platforms sample. The language-platforms file has a combination of multiple applications in different languages (Java, Go, Python, Ruby, etc.) which needs to be containerized and then put into Kubernetes.</description></item><item><title>Commands</title><link>http://konveyor.github.io/move2kube/commands/</link><pubDate>Fri, 05 Aug 2022 11:13:15 -0600</pubDate><guid>http://konveyor.github.io/move2kube/commands/</guid><description>Move2Kube creates all resources required for deploying applications into Kubernetes including containerization and Kubernetes resources. It supports translating from Docker swarm/Docker-compose, Cloud Foundry, and other non-containerized applications. If the application does not use any of those or is not containerized, it can still be transformed by Move2Kube.
Note: Use these commands to view the options available in Move2Kube.
-h, --help help for move2kube --log-file string File to store the logs in.</description></item><item><title>Transformers</title><link>http://konveyor.github.io/move2kube/transformers/</link><pubDate>Fri, 05 Aug 2022 10:42:32 -0600</pubDate><guid>http://konveyor.github.io/move2kube/transformers/</guid><description>Move2Kube uses a suite of transformers to modify objects. To customize the output artifacts generated for a specific input, these transformers can be configured or new custom transformers can be created to achieve the required result. Transformer behavior and configuration is determined by the Transformer Class it uses. Though all the transformer classes are equal internally in Move2Kube, from a usage perspective, they are classified into three categories.
Purpose Built - Has a specific job and the customization allows for changing the parameters/configuration required for performing the specific job.</description></item><item><title>Add custom files and directories in custom locations</title><link>http://konveyor.github.io/move2kube/tutorials/customizeoutput/addcustfiledir/</link><pubDate>Thu, 04 Aug 2022 19:22:55 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/customizeoutput/addcustfiledir/</guid><description>Move2Kube allows custom template files to be added to the directories of your choice. In this example, we illustrate this by adding a custom helm-chart.
Start by creating an empty workspace directory say workspace and make it the current working directory. We will assume all commands are executed within this directory. $ mkdir workspace &amp;amp;&amp;amp; cd workspace Use the enterprise-app as input for this flow. $ curl https://move2kube.konveyor.io/scripts/download.sh | bash -s -- -d samples/enterprise-app/src -r move2kube-demos $ ls src README.</description></item><item><title>Parameterizing custom fields in Helm Chart, Kustomize, OC templates</title><link>http://konveyor.github.io/move2kube/tutorials/customizeoutput/paramcustomfieldshelm/</link><pubDate>Thu, 04 Aug 2022 19:22:25 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/customizeoutput/paramcustomfieldshelm/</guid><description>In this tutorial, we illustrate how to parameterize a custom field in the Helm chart generated by Move2Kube.
Start by creating an empty workspace directory say workspace and make it the current working directory. We will assume all commands are executed within this directory. $ mkdir workspace &amp;amp;&amp;amp; cd workspace Use the enterprise-app as input for this flow. $ curl https://move2kube.konveyor.io/scripts/download.sh | bash -s -- -d samples/enterprise-app/src -r move2kube-demos $ ls src README.</description></item><item><title>Add custom annotations to Kubernetes YAMLs</title><link>http://konveyor.github.io/move2kube/tutorials/customizeoutput/customannotationsyaml/</link><pubDate>Thu, 04 Aug 2022 19:22:02 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/customizeoutput/customannotationsyaml/</guid><description>Move2Kube generates Kubernetes YAMLs based on the needs of the application, but there might be situations where you might require specific fields to be different in the output. In this example, we illustrate how we can add an annotation to the Ingress YAML specifying an ingress class.
Create an empty workspace directory mamed workspace and make it the current working directory. Assume all commands are executed within this directory. $ mkdir workspace &amp;amp;&amp;amp; cd workspace Use the enterprise-app as the input for this flow.</description></item><item><title>Customize generated Dockerfile and built-in transformer behavior</title><link>http://konveyor.github.io/move2kube/tutorials/customizeoutput/customgendockerfile/</link><pubDate>Thu, 04 Aug 2022 19:21:31 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/customizeoutput/customgendockerfile/</guid><description>In this tutorial we will make Move2Kube add custom Dockerfile, and a custom file.
Create an empty workspace directory named workspace and make it the current working directory. Assume all commands are executed within this directory. $ mkdir workspace &amp;amp;&amp;amp; cd workspace Use the enterprise-app as input for this flow. $ curl https://move2kube.konveyor.io/scripts/download.sh | bash -s -- -d samples/enterprise-app/src -r move2kube-demos $ ls src README.md config-utils customers docs frontend gateway orders Run Move2Kube without any customization.</description></item><item><title>Customize Kubernetes YAMLs to target specific clusters</title><link>http://konveyor.github.io/move2kube/tutorials/customkubeyaml/</link><pubDate>Thu, 04 Aug 2022 19:13:38 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/customkubeyaml/</guid><description>Move2Kube already supports targeting across multiple clusters includig: Kubernetes, Openshift, IBM-IKS, IBM-Openshift, Azure-EKS, Azure-AKS and GCP-GKS. There might be situations where you require generating Kubernetes YAMLs to target a particular cluster. In this tutorial we will see how we can use Konveyor Move2Kube to change the versions of existing Kubernetes resources to target a particular cluster. Move2Kube can also be customized to generate Kubernetes YAMLS deployable on a particular cluster.</description></item><item><title>Create Helm-charts, Kustomize overlays from Kubernetes Yamls</title><link>http://konveyor.github.io/move2kube/tutorials/createhelmchartskustomize/</link><pubDate>Thu, 04 Aug 2022 19:13:10 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/createhelmchartskustomize/</guid><description>In this tutorial we will see how to transform a set of Kubernetes YAMLs by parameterizing them. We can use Move2Kube to generate parameterized Helm charts, Kustomize and Openshift Templates from the Kubernetes YAMLs. Move2Kube can also change the version of Kubernetes resources to target particular clusters.
Prerequisites
Move2Kube CLI tool is installed Use a kubernetes-to-kubernetes sample. The kubernetes-to-kubernetes directory has some Kubernetes YAMLs that deploy a web app with multiple services.</description></item><item><title>Create and deploy Windows .NET containers</title><link>http://konveyor.github.io/move2kube/tutorials/createwincontainersnet/</link><pubDate>Thu, 04 Aug 2022 19:12:22 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/createwincontainersnet/</guid><description>.NET applications in 4.x framework In this tutorial, we will learn how containerize .NET applications developed for 4.x versions of .NET framework using Windows containers and deploy them to Kubernetes cluster using Move2Kube. Here, we are going to use the sample WCF service from samples/wcfservice.
Prerequisites Install Move2Kube.
Configure Kubernetes with windows node support.
Download the samples/wcfservice sample from move2kube-demos repository.
$ curl https://move2kube.konveyor.io/scripts/download.sh | bash -s -- -d samples/wcfservice -r move2kube-demos $ tree -L 2 wcfservice/ wcfservice/ ├── wcfservice │ ├── App.</description></item><item><title>Migrate and deploy .NET Core applications to Kubernetes</title><link>http://konveyor.github.io/move2kube/tutorials/migratedeploynetcore/</link><pubDate>Thu, 04 Aug 2022 19:11:51 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/migratedeploynetcore/</guid><description>In this tutorial, we will learn how to migrate and deploy .NET Core applications to a Kubernetes cluster using the target artifacts generated by Move2Kube. We are going to use the data from samples/dotnet5.
Prerequisites Install Move2Kube.
Install a container runtime: Docker or Podman.
Install Kubectl.
Verify the dependencies were correctly installed.
$ docker version or
$ podman info $ kubectl version Download the samples/dotnet5 sample from move2kube-demos repository.
$ curl https://move2kube.</description></item><item><title>Migrate from Docker Compose to Kubernetes</title><link>http://konveyor.github.io/move2kube/tutorials/migratedockercomposekube/</link><pubDate>Thu, 04 Aug 2022 19:11:24 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/migratedockercomposekube/</guid><description>Summary $ move2kube transform -s docker-compose Move2Kube automatically analyzes all the yaml files in the docker-compose directory and transforms and creates all artifacts required for deploying the application in Kubernetes.
Prerequisites Install the Move2Kube CLI tool. Note: This tutorial has been created with v0.3.3-rc.2 version of Move2Kube.
$ MOVE2KUBE_TAG=&amp;#39;v0.3.3-rc.2&amp;#39; bash &amp;lt;(curl https://raw.githubusercontent.com/konveyor/move2kube/main/scripts/install.sh) Install a Kubernetes cluster from MiniKube. Overview In this tutorial we will migrate an application written for Docker Compose to run on Kubernetes using the two Docker Compose samples from the move2kube-demos repo.</description></item><item><title>Migrate and deploy Cloud Foundry applications to Kubernetes</title><link>http://konveyor.github.io/move2kube/tutorials/migratedeploycfapps/</link><pubDate>Thu, 04 Aug 2022 19:10:59 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/migratedeploycfapps/</guid><description>This document steps through installing Move2Kube and using Move2Kube&amp;rsquo;s the step process (collect, plan and transform) to create deployment artifacts for Cloud Foundry apps using the data from samples/cloud-foundry.
Summary $ move2kube transform -s cloud-foundry Move2Kube will automatically analyze all the artifacts in the cloud-foundry directory and transform and create all the artifacts required for deploying the application in Kubernetes.
Prerequisites A source directory which contains the source code files and/or the manifest.</description></item><item><title>Run transforms non-interactively</title><link>http://konveyor.github.io/move2kube/tutorials/runnoninteractively/</link><pubDate>Thu, 04 Aug 2022 19:10:32 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/runnoninteractively/</guid><description>Move2Kube interacts with users through a series of questions during the transformation phase. After looking at the output, you may want to rerun it and give different answers to some of the questions. In order to avoid answering all of the same questions over and over, Move2Kube provides a simple configuration file.
In the directory where we ran the move2kube transform command, we see a file called m2kconfig.yaml which contains the answers provided to all of the questions that were asked.</description></item><item><title>Web Interface</title><link>http://konveyor.github.io/move2kube/installation/installweb/</link><pubDate>Wed, 03 Aug 2022 15:23:24 -0600</pubDate><guid>http://konveyor.github.io/move2kube/installation/installweb/</guid><description>Minikube can be installed using Docker or Podman web interfaces.
Installing Move2Kube using Docker Follow the steps below to install Move2Kube with options of persistence by mounting to the current directory and advanced features by mounting to the Docker socket allowing Move2Kube to run container based transformers.
Move2Kube can also be installed as a Helm Chart from ArtifactHub. For more information on Helm Chart and Operator see Move2Kube Operator
Procedure .</description></item><item><title>Command line tool</title><link>http://konveyor.github.io/move2kube/installation/installcli/</link><pubDate>Wed, 03 Aug 2022 15:23:12 -0600</pubDate><guid>http://konveyor.github.io/move2kube/installation/installcli/</guid><description>Installing on Linux / MacOS / Windows WSL (Recommended): The easiest way to install Move2Kube is to download the pre-built binaries for Linux, MacOS, and Windows from the list of releases on Github: https://github.com/konveyor/move2kube/releases. Follow the steps below to install the latest stable version.
Procedure
Install Move2Kube with one of the following options. Latest stable version: bash &amp;lt;(curl https://raw.githubusercontent.com/konveyor/move2kube/main/scripts/install.sh) A specific version (for example version v0.3.0-beta.0): MOVE2KUBE_TAG=&amp;#39;v0.3.0-beta.0&amp;#39; bash &amp;lt;(curl https://raw.githubusercontent.com/konveyor/move2kube/main/scripts/install.sh) Bleeding edge version: BLEEDING_EDGE=&amp;#39;true&amp;#39; bash &amp;lt;(curl https://raw.</description></item><item><title>Overview</title><link>http://konveyor.github.io/tackle/overview/</link><pubDate>Fri, 08 Jul 2022 14:37:53 -0600</pubDate><guid>http://konveyor.github.io/tackle/overview/</guid><description>Tackle is a collection of tools that support modernizing and migrating applications to Kubernetes. These tools assess applications to determine which option is the appropriate migration strategy for each application:
Rehosting Replatforming Refactoring Tackle uses an interactive questionnaire for the assessment which enables key stakeholders to gather information about applications, discuss risks flagged by Tackle, and reach a consensus in formulating recommendations for each application.
Tackle Refactoring Tools The tools are cloud-native micro-services that are accessible from a common Tackle UI.</description></item><item><title>Overview</title><link>http://konveyor.github.io/crane/overview/</link><pubDate>Fri, 08 Jul 2022 14:32:29 -0600</pubDate><guid>http://konveyor.github.io/crane/overview/</guid><description>The Crane tool helps application owners migrate Kubernetes workloads and their states between clusters, remove environment-specific configuration, and automate application deployments along the way.
The process uses a few tools:
crane: The command line tool that migrates applications to the terminal. crane-lib: The brains behind Crane functionality responsible for transforming resources. crane-plugin-openshift: Plugin specifically tailored to manage OpenShift migration workloads and an example of a repeatable best-practice. crane-plugins: Collection of plugins from the Konveyor community based on experience from performing Kube migrations.</description></item><item><title>Overview</title><link>http://konveyor.github.io/forklift/overview/</link><pubDate>Thu, 07 Jul 2022 10:57:01 -0600</pubDate><guid>http://konveyor.github.io/forklift/overview/</guid><description>Forklift provides a simplistic way of large scale migration virtual machines at scale to Kubernetes from traditional hypervisors like VMware (vSphere) and Red Hat Virtualization (oVirt) to KubeVirt. Forklift is an open source tool based on proven core linux v2v technologies that can rehost a few or hundreds of VMs while minimizing downtime as it lifts and shifts the applications. The benefits of Forklift include:
Migration Analytics: Validate the compatibility of the virtual machine before executing the migration.</description></item><item><title>Upgrading to 2.0</title><link>http://konveyor.github.io/tackle/upgradeto2/</link><pubDate>Wed, 29 Jun 2022 10:53:45 -0600</pubDate><guid>http://konveyor.github.io/tackle/upgradeto2/</guid><description>For additional information, see the Tackle CLI tool directory in the tackle2-hub repository.
A CLI tool is available to upgrade Tackle that will migrate application data seeds from a running 1.2 instance to a running 2.0 instance, or export the data to be imported at a later time. The tool has the following functions:
export-tackle1: Exports Tackle 1.2 API objects into local JSON files (tags, tag types, and job functions).</description></item><item><title>Administrator view tasks</title><link>http://konveyor.github.io/tackle/admintasks/</link><pubDate>Tue, 28 Jun 2022 15:16:01 -0600</pubDate><guid>http://konveyor.github.io/tackle/admintasks/</guid><description>The administrator view is intended to be used by administrators to set up the Tackle instance environment. Credentials This management module enables administrators to create and manage credentials for access to private repositories. It also allows for the architects to assign the credentials to applications without knowing their contents. Key credential attributes to have before starting the procedure include:
Name Description (optional) Type (Souce control, Maven settings file, Proxy) Created by Important There are three types of credentials.</description></item><item><title>Views</title><link>http://konveyor.github.io/tackle/views/</link><pubDate>Tue, 14 Jun 2022 14:59:53 -0600</pubDate><guid>http://konveyor.github.io/tackle/views/</guid><description>The latest version of Tackle has the Developers view and the new Architects view to support the three main roles of users:
Administrators: Has access to some application-wide configuration parameters that other users can consume but not change or browse.
Example actions: Define Git credentials, Maven settings, .xml files.
Architects: Often the technical leads for the migration project that can create and modify applications and information related to it. The Architects do not need to have access to sensitive information, but can consume it.</description></item><item><title>Seeding Instances</title><link>http://konveyor.github.io/tackle/instances/</link><pubDate>Tue, 14 Jun 2022 14:59:46 -0600</pubDate><guid>http://konveyor.github.io/tackle/instances/</guid><description>Tackle instances have key parameters that are configured in the Controls window prior to migration by the project architect and can be added and edited as needed.
These parameters define applications and individuals, teams, verticals or areas within an organization affected or participating in the migration.
Stakeholders Stakeholder groups Job functions Business services Tag types Tags Seeding Tackle instance The steps to creating and configuring a Tackle instance can be performed in any order, but the suggested order below is the most efficient for creating stakeholders and tags.</description></item><item><title>Installing Tackle</title><link>http://konveyor.github.io/tackle/installation/</link><pubDate>Tue, 14 Jun 2022 14:59:30 -0600</pubDate><guid>http://konveyor.github.io/tackle/installation/</guid><description>Follow the steps below to provision the minikube cluster and install Tackle 2.0.
Provisioning Minikube Follow the steps below to provision minikube for single users deploying Tackle on a workstation. These steps will configure minikube and enable:
Ingress so the Tackle tool can publish outside of the Kubernetes cluster. Operator lifecycle manager (OLM) addon. (OpenShift has OLM installed out of the box but Kubernetes does not.) Procedure
Provision the minikube cluster with these recommended parameters.</description></item><item><title>Welcome to Tackle 2.0</title><link>http://konveyor.github.io/tackle2/</link><pubDate>Tue, 14 Jun 2022 14:59:30 -0600</pubDate><guid>http://konveyor.github.io/tackle2/</guid><description>Tackle documentation
Tackle 2.0 includes the seamless integration with the analysis capabilities of the Windup project, also known downstream as Migration Toolkit for Applications, enabling Tackle to effectively manage, assess and now also analyze applications to have a holistic view at your portfolio when dealing with large scale modernization and Kubernetes adoption initiatives. This is essential to provide key insights that allow Architects leading these massive projects to make informed decisions, thus reducing risks and making the required effort measurable and predictable.</description></item><item><title>Assessing and analyzing applications</title><link>http://konveyor.github.io/tackle/assessanalyze/</link><pubDate>Tue, 14 Jun 2022 14:59:11 -0600</pubDate><guid>http://konveyor.github.io/tackle/assessanalyze/</guid><description>Tackle core functions are assessing and analyzing the applications for migration and are performed on the Application inventory page. Assessing applications Follow the steps below to facilitate discussion of application migration.
Procedure
Click Application inventory in the left menu in the Development view. Click the checkbox to the left of the application being assessed. Note: Only one application can be assessed at a time.
Click the Assess button. Select the Stakeholders and Stakeholder groups from the drop-down lists to track who contributed to the assessment for future reference.</description></item><item><title>Adding applications</title><link>http://konveyor.github.io/tackle/addapps/</link><pubDate>Tue, 14 Jun 2022 14:58:52 -0600</pubDate><guid>http://konveyor.github.io/tackle/addapps/</guid><description>Applications can be added to Tackle by creating new applications from scratch manually or by importing them. Tackle applications are defined by manually entered and pre-defined attributes:
Name (manual) Description (manual) Business service (pre-defined) Tags (pre-defined) Source code Binary Creating a new application Follow the steps below to add a new application to the inventory for assessment and analysis.
Note: Before starting this procedure, it is helpful to set up business services, check tags and tag types, and create additions as needed.</description></item><item><title>Migration plan options</title><link>http://konveyor.github.io/forklift/migratingvms/migrateoptions/</link><pubDate>Thu, 19 May 2022 10:04:15 -0600</pubDate><guid>http://konveyor.github.io/forklift/migratingvms/migrateoptions/</guid><description>On the Migration plans page of the Forklift web console, click the Options menu kebab beside a migration plan to access the following options:
Edit: Edit the details of a migration plan. A migration plan cannot be edited while it is running or after it has completed successfully. Duplicate: Create a new migration plan with the same virtual machines (VMs), parameters, mappings, and hooks as an existing plan. Use this feature for the following tasks: Migrating VMs to a different namespace.</description></item><item><title>Migrating virtual machines using the command line</title><link>http://konveyor.github.io/forklift/migratingvms/migratecli/</link><pubDate>Thu, 19 May 2022 10:04:06 -0600</pubDate><guid>http://konveyor.github.io/forklift/migratingvms/migratecli/</guid><description>Follow the steps below to migrate virtual machines (VMs) to KubeVirt using the command line (CLI) by creating Forklift custom resources (CRs) and specifying:
A name for cluster-scoped CRs A name and a namespace for namespace-scoped CRs Prerequisites
Must be logged in as a user with cluster-admin privileges. VMware only: Must have the vCenter SHA-1 fingerprint. Must create a VMware Virtual Disk Development Kit (VDDK) image in a secure registry that is accessible to all clusters.</description></item><item><title>Migrating virtual machines using the web console</title><link>http://konveyor.github.io/forklift/migratingvms/migrateweb/</link><pubDate>Thu, 19 May 2022 10:03:16 -0600</pubDate><guid>http://konveyor.github.io/forklift/migratingvms/migrateweb/</guid><description>Migrate virtual machines (VMs) to KubeVirt using the Forklift web console by performing the folloing tasks:
Adding source and destination providers Creating network and storage mapping Creating and running a migration plan Prerequisites
Ensure that all Prerequisites are set. VMware only: Create a VMware Virtual Disk Development Kit (VDDK) image. Adding source providers Follow the procedures below to add VMware or oVirt source providers using the Forklift web console.
Adding a VMware source provider Add a VMware source provider by using the Forklift web console.</description></item><item><title>Canceling a migration</title><link>http://konveyor.github.io/forklift/migratingvms/cancelmigrate/</link><pubDate>Wed, 18 May 2022 11:30:43 -0600</pubDate><guid>http://konveyor.github.io/forklift/migratingvms/cancelmigrate/</guid><description>Follow the steps below to cancel the migration of some or all virtual machines (VMs) while a migration plan is in progress by using the Forklift web console.
Procedure
Click Migration Plans. Click the name of a running migration plan to view the migration details. Select one or more VMs and click Cancel. Click Yes, cancel to confirm the cancellation. The status of the VM shows canceled in the Migration details by VM list.</description></item><item><title>Advanced migration options</title><link>http://konveyor.github.io/forklift/migratingvms/advancedmigrate/</link><pubDate>Wed, 18 May 2022 11:04:36 -0600</pubDate><guid>http://konveyor.github.io/forklift/migratingvms/advancedmigrate/</guid><description>Changing precopy intervals for warm migration Follow the steps below to change the snapshot interval by patching the ForkliftController custom resource (CR).
Procedure
Patch the ForkliftController CR: $ kubectl patch forkliftcontroller/&amp;lt;forklift-controller&amp;gt; -n konveyor-forklift -p &amp;#39;{&amp;#34;spec&amp;#34;: {&amp;#34;controller_precopy_interval&amp;#34;: &amp;lt;60&amp;gt;}}&amp;#39; --type=merge (1) The explanation below refers to the callout in the sample code above.
(1) Specify the precopy interval in minutes. The default value is 60. Note: The forklift-controller pod does not need to be restarted.</description></item><item><title>Upgrading Forklift</title><link>http://konveyor.github.io/forklift/installingforklift/upgrade/</link><pubDate>Tue, 17 May 2022 14:36:19 -0600</pubDate><guid>http://konveyor.github.io/forklift/installingforklift/upgrade/</guid><description>Follow the steps below to upgrade the Forklift Operator using the OKD web console.
Important: Do not skip a release when upgrading. For example, upgrade 2.0 to 2.1 and then 2.1 to 2.2.
If upgrading from 2.2 to 2.3, see the ### Forklift 2.2 to 2.3 Upgrade Notes section after the procedure
Procedure
Open the OKD web console. Click Operators, Installed Operators, Migration Tookit for Virtualization Operator, then Subscription. Change the update channel to the correct release.</description></item><item><title>Uninstalling Forklift</title><link>http://konveyor.github.io/forklift/installingforklift/uninstall/</link><pubDate>Tue, 17 May 2022 14:16:26 -0600</pubDate><guid>http://konveyor.github.io/forklift/installingforklift/uninstall/</guid><description>Uninstall Forklift using the OKD web console or the command line interface (CLI).
Uninstalling Forklift with the OKD web console Follow the steps below to uninstall Forklift using the OKD web console to delete the konveyor-forklift project and custom resource definitions (CRDs).
Prerequisites
Log in as a user with cluster-admin privileges. Procedure
Click Home and then Projects. Locate the konveyor-forklift project. Select Delete Project from the Options menu kebab on the right side of the project.</description></item><item><title>Installing the Forklift Operator</title><link>http://konveyor.github.io/forklift/installingforklift/installation/</link><pubDate>Wed, 11 May 2022 15:57:06 -0600</pubDate><guid>http://konveyor.github.io/forklift/installingforklift/installation/</guid><description>The Forklift Operator can be installed using the OKD web console or the command line interface (CLI).
Installing the Forklift Operator using the OKD web console Follow the steps below to install the Forklift Operator by using the OKD web console.
Prerequisites
OKD 4.10 installed. KubeVirt Operator installed. Procedure
Log in with cluster-admin permissions. OPen the OKD web console, click Operators, then OperatorHub. Use the Filter by keyword field to search for forklift-operator.</description></item><item><title>Prerequisites</title><link>http://konveyor.github.io/forklift/installingforklift/prereqs/</link><pubDate>Wed, 11 May 2022 15:56:20 -0600</pubDate><guid>http://konveyor.github.io/forklift/installingforklift/prereqs/</guid><description>The following prerequisites ensure the environment is prepared for migration.
Software compatibility guidelines Install compatible software versions with Forklift using the table below.
Forklift OKD KubeVirt VMware vSphere oVirt 2.3 4.10 4.10 6.5 or later 4.4.9 or later Storage support and default modes Forklift uses the following default volume and access modes for supported storage.
Note: The following settings must be applied if the KubeVirt storage does not support dynamic provisioning:</description></item><item><title>Step One: Export Resources</title><link>http://konveyor.github.io/crane/usingcrane/step1export/</link><pubDate>Fri, 22 Apr 2022 10:29:18 -0600</pubDate><guid>http://konveyor.github.io/crane/usingcrane/step1export/</guid><description>The first step of the cluster migration process is exporting resources from a source cluster of any namespace to be input for the subsequent commands.
All of the following export commands will output the contents of the foo namespace into a local export directory with the context demo defined in KUBECONFIG.
crane export -n foo -e export --context demo cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; conf.yaml namespace: foo export-dir: export context: demo EOF crane export -c conf.</description></item><item><title>Step Two: Transform Exports</title><link>http://konveyor.github.io/crane/usingcrane/step2transform/</link><pubDate>Fri, 22 Apr 2022 10:29:06 -0600</pubDate><guid>http://konveyor.github.io/crane/usingcrane/step2transform/</guid><description>The Transform command facilitates the changes to the exported resources that are frequently necessary when migrating workloads between one environment to another. For example:
Stripping the resource status information that is no longer relevant after the resource is serialized out of a cluster. Adjusting resource quotas to fit the destination environment. Altering node selectors to match the new environment if the node labels do not match the source environment. Applying custom labels or annotations to resources during the migration.</description></item><item><title>Step Three: Apply Patches</title><link>http://konveyor.github.io/crane/usingcrane/step3apply/</link><pubDate>Fri, 22 Apr 2022 10:28:43 -0600</pubDate><guid>http://konveyor.github.io/crane/usingcrane/step3apply/</guid><description>The final step of the cluster migration process is to apply all the patches generated by the Transform command to exported resources.
crane apply -e export -t transform -o output Apply the patches in the transform directory to the resources in the export directory and save the modified resource files in the output directory.
After applying the patches, the resources located in output directory can either be deployed to the destination cluster using kubectl apply, or they can be pushed to a repository and then applied with the help of the GitOps pipeline.</description></item><item><title>Integrating GitOps</title><link>http://konveyor.github.io/crane/tools/gitopsintegration/</link><pubDate>Thu, 14 Apr 2022 15:22:46 -0600</pubDate><guid>http://konveyor.github.io/crane/tools/gitopsintegration/</guid><description>All Crane commands are individual utilities, but when used together in sequence, they form a pipeline.
Crane makes it easy to integrate a gitops that applies the patches/resources generated at the end of the apply command on the destination cluster. The resources generated at the end of the process (i.e export, transform, apply) can be pushed to a github repository, and a pipeline can be created to deploy the resources on a cluster on every push.</description></item><item><title>Developing custom plugins</title><link>http://konveyor.github.io/crane/tools/customplugins/</link><pubDate>Thu, 14 Apr 2022 15:22:29 -0600</pubDate><guid>http://konveyor.github.io/crane/tools/customplugins/</guid><description>This document covers how to write a plugin binary using crane-lib. It requires:
Procedure
Go to the development environment setup. (Optionally, an overview of the crane toolkit.)
Create binary plugin for crane-lib as a simple Go program in the following format that will:
Read an input from stdin. Call the Run function with the input object passed as unstructured. Print the return value of Run function on stdout. package main import ( &amp;#34;fmt&amp;#34; jsonpatch &amp;#34;github.</description></item><item><title>Tunnel API</title><link>http://konveyor.github.io/crane/tools/tunnelapi/</link><pubDate>Thu, 14 Apr 2022 15:21:57 -0600</pubDate><guid>http://konveyor.github.io/crane/tools/tunnelapi/</guid><description>The tunnel-api sub-command can be used to access an on-premise cluster from a cloud cluster to allow orchestrating migrations from on-premise clusters using MTC where access is not possible otherwise.
An openvpn client on the on-premise cluster will connect to a server running on the cloud cluster and the openvpn server is exposed to the client using a load balancer address on the cloud cluster.
A service created on the cloud cluster is used to expose the on-premise clusters API to MTC running on the cloud cluster.</description></item><item><title>Plugin Manager</title><link>http://konveyor.github.io/crane/tools/pluginmanager/</link><pubDate>Thu, 14 Apr 2022 15:19:04 -0600</pubDate><guid>http://konveyor.github.io/crane/tools/pluginmanager/</guid><description>The Plugin Manager is an optional utility that assists in adding plugins to the appropriate location to be consumed by the transform command.
List Plugin utility The List Plugin utility discovers available plugins that that are compatible with the current OS and architecture.
crane plugin-manager list Listing from the repo default +-----------------+------------------+-------------------+ | NAME | SHORTDESCRIPTION | AVAILABLEVERSIONS | +-----------------+------------------+-------------------+ | OpenshiftPlugin | OpenshiftPlugin | v0.0.1 | +-----------------+------------------+-------------------+ Other valid execution examples This command lists all installed plugins managed by plugin-manager.</description></item><item><title>Stateless application mirror</title><link>http://konveyor.github.io/crane/tutorials/statelessappmirror/</link><pubDate>Thu, 14 Apr 2022 15:18:35 -0600</pubDate><guid>http://konveyor.github.io/crane/tutorials/statelessappmirror/</guid><description>This tutorial is an example of how to mirror a simple, stateless PHP Guestbook application using Crane.
Roadmap
1. Deploy the Guestbook application in the source cluster. 2. Extract resources from the source cluster using Crane Export. 3. Transform resources to prepare manifests for the destination cluster using Crane Transform. 4. Apply the transformations using Crane Apply. Apply application manifests to the destination cluster. Prerequisites
Create a source and destination Kubernetes cluster environment in minikube or Kind: minikube</description></item><item><title>Installing Crane</title><link>http://konveyor.github.io/crane/installation/</link><pubDate>Thu, 14 Apr 2022 15:17:07 -0600</pubDate><guid>http://konveyor.github.io/crane/installation/</guid><description>Follow the procedure below to install the Crane tool.
Step 1. Install the Crane binary. Enter the following command to install the latest version of Crane binary. curl -sL https://api.github.com/repos/konveyor/crane/releases/latest | jq -r &amp;#34;.assets[] | select(.name | contains(\&amp;#34;&amp;lt;arch&amp;gt;-&amp;lt;os&amp;gt;\&amp;#34;)) | .browser_download_url&amp;#34; | wget -i- chmod +x &amp;lt;binary&amp;gt; cp &amp;lt;binary&amp;gt; /usr/bin/crane Crane currently supports three architectures: amd64-linux amd64-darwin arm64-darwin Run the following command to download the latest version of Crane for amd64-linux. curl -sL https://api.</description></item><item><title>Migrating a Kubernetes cluster</title><link>http://konveyor.github.io/crane/tutorials/migratek8cluster/</link><pubDate>Thu, 14 Apr 2022 15:14:19 -0600</pubDate><guid>http://konveyor.github.io/crane/tutorials/migratek8cluster/</guid><description>This tutorial is an example of how to use the Konveyor tool Crane to migrate an application (inventory) from the source Kubernetes cluster (src) to the destination cluster (dest).
Refer to the Crane Documentation for more detailed information.
Note: In addition to migrating with Crane, it is helpful to push the application to git so it can be automatically deployed to any cluster in the future. This demo includes those steps.</description></item></channel></rss>