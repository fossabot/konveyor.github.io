<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Konveyor Homepage on Documentation for Konveyor projects</title><link>http://konveyor.github.io/</link><description>Recent content in Konveyor Homepage on Documentation for Konveyor projects</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 22 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://konveyor.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>1. Collect</title><link>http://konveyor.github.io/move2kube/tutorials/cfappstok8/1collect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/cfappstok8/1collect/</guid><description>Note: This is an optional step. If you are not familiar with Cloud Foundry or you do not want to collect information from the running app, skip to Customizing the output.
To analyze the running application in Cloud Foundry (CF), the Move2Kube CLI tool provides a command called collect. As the name suggests, it collects information about applications running in the cloud.
For collecting information from a CF running instance, consider requiring cf CLI for logging into Cloud Foundry.</description></item><item><title>Concepts</title><link>http://konveyor.github.io/move2kube/concepts/</link><pubDate>Tue, 16 Aug 2022 17:21:40 -0600</pubDate><guid>http://konveyor.github.io/move2kube/concepts/</guid><description>Move2Kube has four concepts that are useful to understand when customizing output.
Important: It may be helpful to go through the tutorials first, then reading this section to learn more about each concept in more detail.
Artifacts Source code
Artifacts represent the application objects that can be passed between transformers.
type Artifact struct { Name string `yaml:&amp;#34;name,omitempty&amp;#34; json:&amp;#34;name,omitempty&amp;#34;` Type ArtifactType `yaml:&amp;#34;type,omitempty&amp;#34; json:&amp;#34;type,omitempty&amp;#34;` ProcessWith metav1.LabelSelector `yaml:&amp;#34;processWith,omitempty&amp;#34; json:&amp;#34;processWith,omitempty&amp;#34;` // Selector for choosing transformers that should process this artifact, empty is everything Paths map[PathType][]string `yaml:&amp;#34;paths,omitempty&amp;#34; json:&amp;#34;paths,omitempty&amp;#34; m2kpath:&amp;#34;normal&amp;#34;` Configs map[ConfigType]interface{} `yaml:&amp;#34;configs,omitempty&amp;#34; json:&amp;#34;config,omitempty&amp;#34;` // Could be IR or template config or any custom configuration } Artifact fields Each artifact is an object with fields that need to be understood in order to write transformers effectively.</description></item><item><title>2. Plan</title><link>http://konveyor.github.io/move2kube/tutorials/cfappstok8/2plan/</link><pubDate>Fri, 12 Aug 2022 12:08:16 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/cfappstok8/2plan/</guid><description>We start by planning the migration. During the plan phase, Move2Kube will analyze the files in the source directory, detect what services exist, create a plan on how to containerize them using Dockerfiles, and transform them into Kubernetes deployments, services, ingress, etc.
In order to do the planning, Move2Kube has a large number of built-in transformers for different languages and platforms. Each transformer walks through the source directory from top to bottom and tries to find files that it recognizes.</description></item><item><title>3. Transform</title><link>http://konveyor.github.io/move2kube/tutorials/cfappstok8/3transform/</link><pubDate>Fri, 12 Aug 2022 12:08:16 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/cfappstok8/3transform/</guid><description>Now run the transformation according to the plan file generated in the previous step. The transformation phase runs all of the transformers again, but this time the transformers will use the plan to generate the output files.
During this process, the transformers might run into situations where it requires some more information to generate the output. In order to get this information, it will ask the user some questions. The questions range from yes/no, to multiple choice, to string input and most will have a default answer.</description></item><item><title>Using Move2Kube CLI</title><link>http://konveyor.github.io/move2kube/tutorials/usingcli/</link><pubDate>Thu, 04 Aug 2022 19:09:57 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/usingcli/</guid><description>This tutorial shows how to transform a set of sample applications to run on Kubernetes using the Move2Kube CLI tool to generate the Kubernetes YAMLs, Dockerfiles, build scripts for each application, and then build the container images to deploy them to a cluster.
Prerequisites Install the Move2Kube CLI tool.
Use thelanguage-platforms sample directory which has a combination of multiple applications in different languages (Java, Go, Python, Ruby, etc.) that need to be containerized and deployed to Kubernetes.</description></item><item><title>Using Move2Kube UI</title><link>http://konveyor.github.io/move2kube/tutorials/usingui/</link><pubDate>Thu, 04 Aug 2022 19:10:11 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/usingui/</guid><description>Similar to the command line tool, the Move2Kube Web-UI can also perform the transformation with all the capabilities that are in the command line tool. This document explains the steps to bring up the UI and backend using Docker and use it for transformation.
Prerequisites Install Docker.
Use the language-platforms sample. The language-platforms file has a combination of multiple applications in different languages (Java, Go, Python, Ruby, etc.) which need to be containerized and then put into Kubernetes.</description></item><item><title>Contributing To Konveyor</title><link>http://konveyor.github.io/konveyor/contributetokonveyor/</link><pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate><guid>http://konveyor.github.io/konveyor/contributetokonveyor/</guid><description>Contributing Guide Welcome! We are glad that you want to contribute to our project! ðŸ’–
The project&amp;rsquo;s vision can be explored in detail in this enhancement: Unified Experience. Konveyor follows a collaborative and community-driven approach and the project encourages contributions from individuals and organizations alike. Konveyor&amp;rsquo;s charter outlines the project&amp;rsquo;s values, guidelines, and expectations for community members, making it easier for new contributors to get involved.
As you get started, you are in the best position to give us feedback on areas of our project that we need help with including:</description></item><item><title>Commands</title><link>http://konveyor.github.io/move2kube/commands/</link><pubDate>Fri, 05 Aug 2022 11:13:15 -0600</pubDate><guid>http://konveyor.github.io/move2kube/commands/</guid><description>Move2Kube creates all resources required for deploying applications into Kubernetes including containerization and Kubernetes resources. It supports translating from Docker swarm/Docker-compose, Cloud Foundry, and other non-containerized applications. If the application does not use any of those or is not containerized, it can still be transformed by Move2Kube.
Note: Use these commands to view the options available in Move2Kube.
-h, --help help for move2kube --log-file string File to store the logs in.</description></item><item><title>Transformers</title><link>http://konveyor.github.io/move2kube/transformers/</link><pubDate>Fri, 05 Aug 2022 10:42:32 -0600</pubDate><guid>http://konveyor.github.io/move2kube/transformers/</guid><description>Move2Kube uses a suite of transformers to modify objects. To customize the output artifacts generated for a specific input, these transformers can be configured or new custom transformers can be created to achieve the required result. Transformer behavior and configuration is determined by the Transformer Class it uses. Though all the transformer classes are equal internally in Move2Kube, from a usage perspective, they are classified into three categories.
Purpose Built - Has a specific job and the customization allows for changing the parameters/configuration required for performing the specific job.</description></item><item><title>Add custom files and directories in custom locations</title><link>http://konveyor.github.io/move2kube/tutorials/customizeoutput/addcustfiledir/</link><pubDate>Thu, 04 Aug 2022 19:22:55 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/customizeoutput/addcustfiledir/</guid><description>Move2Kube allows custom template files to be added to any directory. This example illustrates this by adding a custom Helm chart.
Start by creating an empty workspace directory named workspace and make it the current working directory. Asume all commands are executed within this directory. $ mkdir workspace &amp;amp;&amp;amp; cd workspace Use the enterprise-app as input for this flow. $ curl https://move2kube.konveyor.io/scripts/download.sh | bash -s -- -d samples/enterprise-app/src -r move2kube-demos $ ls src README.</description></item><item><title>Parameterizing custom fields in Helm Chart, Kustomize, OC templates</title><link>http://konveyor.github.io/move2kube/tutorials/customizeoutput/paramcustomfieldshelm/</link><pubDate>Thu, 04 Aug 2022 19:22:25 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/customizeoutput/paramcustomfieldshelm/</guid><description>This tutorial illustrates how to parameterize a custom field in the Helm chart generated by Move2Kube.
Start by creating an empty workspace directory named workspace and make it the current working directory. Assume all commands are executed within this directory. $ mkdir workspace &amp;amp;&amp;amp; cd workspace Use the enterprise-app as input for this flow. $ curl https://move2kube.konveyor.io/scripts/download.sh | bash -s -- -d samples/enterprise-app/src -r move2kube-demos $ ls src README.md config-utils customers docs frontend gateway orders Run Move2Kube without any customization.</description></item><item><title>Add custom annotations to Kubernetes YAMLs</title><link>http://konveyor.github.io/move2kube/tutorials/customizeoutput/customannotationsyaml/</link><pubDate>Thu, 04 Aug 2022 19:22:02 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/customizeoutput/customannotationsyaml/</guid><description>Move2Kube generates Kubernetes YAMLs based on the needs of the application, but there might be situations that might require specific fields to be different in the output. This example illustrates how to add an annotation to the Ingress YAML specifying an ingress class.
Create an empty workspace directory named workspace and make it the current working directory. Assume all commands are executed within this directory. $ mkdir workspace &amp;amp;&amp;amp; cd workspace Use the enterprise-app as the input for this flow.</description></item><item><title>Customize generated Dockerfile and built-in transformer behavior</title><link>http://konveyor.github.io/move2kube/tutorials/customizeoutput/customgendockerfile/</link><pubDate>Thu, 04 Aug 2022 19:21:31 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/customizeoutput/customgendockerfile/</guid><description>In this tutorial, Move2Kube will add a custom Dockerfile, and a custom file.
Create an empty workspace directory named workspace and make it the current working directory. Assume all commands are executed within this directory. $ mkdir workspace &amp;amp;&amp;amp; cd workspace Use the enterprise-app as input for this flow. $ curl https://move2kube.konveyor.io/scripts/download.sh | bash -s -- -d samples/enterprise-app/src -r move2kube-demos $ ls src README.md config-utils customers docs frontend gateway orders Run Move2Kube without any customization.</description></item><item><title>Customize Kubernetes YAMLs to target specific clusters</title><link>http://konveyor.github.io/move2kube/tutorials/customkubeyaml/</link><pubDate>Thu, 04 Aug 2022 19:13:38 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/customkubeyaml/</guid><description>Move2Kube already supports targeting across multiple clusters including: Kubernetes, Openshift, IBM-IKS, IBM-Openshift, Azure-EKS, Azure-AKS and GCP-GKS. There might be situations that require generating Kubernetes YAMLs to target a particular cluster. This tutorial shows how to use Konveyor Move2Kube to change the versions of existing Kubernetes resources to target a particular cluster. Move2Kube can also be customized to generate Kubernetes YAMLS deployable on a particular cluster.
Prerequisites
Install the Move2Kube CLI tool.</description></item><item><title>Create Helm-charts, Kustomize overlays from Kubernetes Yamls</title><link>http://konveyor.github.io/move2kube/tutorials/createhelmchartskustomize/</link><pubDate>Thu, 04 Aug 2022 19:13:10 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/createhelmchartskustomize/</guid><description>This tutorial will show how to transform a set of Kubernetes YAMLs by parameterizing them by using Move2Kube to generate parameterized Helm charts, Kustomize and Openshift Templates from the Kubernetes YAMLs. Move2Kube can also change the version of Kubernetes resources to target particular clusters.
Prerequisites
Move2Kube CLI tool is installed. Use a kubernetes-to-kubernetes sample. The kubernetes-to-kubernetes directory has some Kubernetes YAMLs that deploy a web app with multiple services. There are three services: a frontend website in PHP, a backend API in Node.</description></item><item><title>Create and deploy Windows .NET containers</title><link>http://konveyor.github.io/move2kube/tutorials/createwincontainersnet/</link><pubDate>Thu, 04 Aug 2022 19:12:22 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/createwincontainersnet/</guid><description>.NET applications in 4.x framework This tutorial shows how containerize .NET applications developed for 4.x versions of .NET framework using Windows containers and deploy them to Kubernetes cluster using Move2Kube. This tutorial uses the sample WCF service from samples/wcfservice.
Prerequisites Install Move2Kube.
Configure Kubernetes with windows node support.
Download the samples/wcfservice sample from move2kube-demos repository.
$ curl https://move2kube.konveyor.io/scripts/download.sh | bash -s -- -d samples/wcfservice -r move2kube-demos $ tree -L 2 wcfservice/ wcfservice/ â”œâ”€â”€ wcfservice â”‚ â”œâ”€â”€ App.</description></item><item><title>Migrate and deploy .NET Core applications to Kubernetes</title><link>http://konveyor.github.io/move2kube/tutorials/migratedeploynetcore/</link><pubDate>Thu, 04 Aug 2022 19:11:51 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/migratedeploynetcore/</guid><description>This tutorial shows how to migrate and deploy .NET Core applications to a Kubernetes cluster using the target artifacts generated by Move2Kube with the data from samples/dotnet5.
Prerequisites Install Move2Kube.
Install a container runtime: Docker or Podman.
Install Kubectl.
Verify the dependencies were correctly installed.
$ docker version or
$ podman info $ kubectl version Download the samples/dotnet5 sample from move2kube-demos repository.
$ curl https://move2kube.konveyor.io/scripts/download.sh | bash -s -- -d samples/dotnet5 -r move2kube-demos View the structure inside the .</description></item><item><title>Migrate from Docker Compose to Kubernetes</title><link>http://konveyor.github.io/move2kube/tutorials/migratedockercomposekube/</link><pubDate>Thu, 04 Aug 2022 19:11:24 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/migratedockercomposekube/</guid><description>Move2Kube automatically analyzes all the YAML files in the docker-compose directory and transforms and creates all artifacts required for deploying the application in Kubernetes using the transform command.
$ move2kube transform -s docker-compose Prerequisites Install the Move2Kube CLI tool. Note: This tutorial has been created with v0.3.3-rc.2 version of Move2Kube.
$ MOVE2KUBE_TAG=&amp;#39;v0.3.3-rc.2&amp;#39; bash &amp;lt;(curl https://raw.githubusercontent.com/konveyor/move2kube/main/scripts/install.sh) Install a Kubernetes cluster from MiniKube. Overview This tutorial shows how to migrate an application written for Docker Compose to run on Kubernetes using the two Docker Compose samples from the move2kube-demos repo.</description></item><item><title>Migrate and deploy Cloud Foundry applications to Kubernetes</title><link>http://konveyor.github.io/move2kube/tutorials/migratedeploycfapps/</link><pubDate>Thu, 04 Aug 2022 19:10:59 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/migratedeploycfapps/</guid><description>This tutorial shows how to install Move2Kube and use the Move2Kube process (collect, plan and transform) to create deployment artifacts for Cloud Foundry apps using the data from samples/cloud-foundry.
Using the transform command, Move2Kube will automatically analyze all the artifacts in the cloud-foundry directory and transform and create all the artifacts required for deploying the application in Kubernetes.
$ move2kube transform -s cloud-foundry Prerequisites A source directory containing the source code files and/or the manifest.</description></item><item><title>Run transforms non-interactively</title><link>http://konveyor.github.io/move2kube/tutorials/runnoninteractively/</link><pubDate>Thu, 04 Aug 2022 19:10:32 -0600</pubDate><guid>http://konveyor.github.io/move2kube/tutorials/runnoninteractively/</guid><description>Move2Kube interacts with users through a series of questions during the transformation phase. After looking at the output, re-running it and giving different answers to some of the questions may be necessary. In order to avoid answering all of the same questions over and over, Move2Kube provides a simple configuration file.
In the directory where the move2kube transform command was run there is a file called m2kconfig.yaml which contains the answers provided to all of the questions that were asked.</description></item><item><title>Web Interface</title><link>http://konveyor.github.io/move2kube/installation/installweb/</link><pubDate>Wed, 03 Aug 2022 15:23:24 -0600</pubDate><guid>http://konveyor.github.io/move2kube/installation/installweb/</guid><description>Minikube can be installed using Docker or Podman web interfaces.
Installing Move2Kube using Docker Follow the steps below to install Move2Kube with options of persistence by mounting to the current directory, and advanced features by mounting to the Docker socket allowing Move2Kube to run container based transformers.
Move2Kube can also be installed as a Helm Chart from ArtifactHub. For more information on Helm Chart and Operator see Move2Kube Operator
Procedure .</description></item><item><title>Command line tool</title><link>http://konveyor.github.io/move2kube/installation/installcli/</link><pubDate>Wed, 03 Aug 2022 15:23:12 -0600</pubDate><guid>http://konveyor.github.io/move2kube/installation/installcli/</guid><description>Installing on Linux / MacOS / Windows WSL (Recommended): The easiest way to install Move2Kube is to download the pre-built binaries for Linux, MacOS, or Windows from the list of releases on Github. Follow the steps below to install the latest stable version.
Procedure
Install Move2Kube with one of the following options. Latest stable version: bash &amp;lt;(curl https://raw.githubusercontent.com/konveyor/move2kube/main/scripts/install.sh) A specific version (for example version v0.3.0-beta.0): MOVE2KUBE_TAG=&amp;#39;v0.3.0-beta.0&amp;#39; bash &amp;lt;(curl https://raw.githubusercontent.com/konveyor/move2kube/main/scripts/install.sh) Bleeding edge version: BLEEDING_EDGE=&amp;#39;true&amp;#39; bash &amp;lt;(curl https://raw.</description></item><item><title>Administrator view tasks</title><link>http://konveyor.github.io/konveyor/admintasks/</link><pubDate>Tue, 28 Jun 2022 15:16:01 -0600</pubDate><guid>http://konveyor.github.io/konveyor/admintasks/</guid><description>The administrator view is intended to be used by administrators to set up the Tackle instance environment. Credentials This management module enables administrators to create and manage credentials for access to private repositories. It also allows for the architects to assign the credentials to applications without knowing their contents. Key credential attributes to have before starting the procedure include:
Name Description (optional) Type (Souce control, Maven settings file, Proxy) Created by Important There are three types of credentials.</description></item><item><title>Views</title><link>http://konveyor.github.io/konveyor/views/</link><pubDate>Tue, 14 Jun 2022 14:59:53 -0600</pubDate><guid>http://konveyor.github.io/konveyor/views/</guid><description>The latest version of Tackle has the Developers view and the new Architects view to support the three main roles of users:
Administrators: Has access to some application-wide configuration parameters that other users can consume but not change or browse.
Example actions: Define Git credentials, Maven settings, .xml files.
Architects: Often the technical leads for the migration project that can create and modify applications and information related to it. The Architects do not need to have access to sensitive information, but can consume it.</description></item><item><title>Seeding Instances</title><link>http://konveyor.github.io/konveyor/instances/</link><pubDate>Tue, 14 Jun 2022 14:59:46 -0600</pubDate><guid>http://konveyor.github.io/konveyor/instances/</guid><description>Tackle instances have key parameters that are configured in the Controls window prior to migration by the project architect and can be added and edited as needed.
These parameters define applications and individuals, teams, verticals or areas within an organization affected or participating in the migration.
Stakeholders Stakeholder groups Job functions Business services Tag types Tags Seeding Tackle instance The steps to creating and configuring a Tackle instance can be performed in any order, but the suggested order below is the most efficient for creating stakeholders and tags.</description></item><item><title>Installing Konveyor</title><link>http://konveyor.github.io/konveyor/installation/</link><pubDate>Tue, 14 Jun 2022 14:59:30 -0600</pubDate><guid>http://konveyor.github.io/konveyor/installation/</guid><description>Follow the steps below to provision the minikube cluster and install Konveyor.
Provisioning Minikube Follow the steps below to provision minikube for single users deploying Konveyor on a workstation. These steps will configure minikube and enable:
Ingress so the Konveyor tool can publish outside of the Kubernetes cluster. Operator lifecycle manager (OLM) addon. Procedure
Provision the minikube cluster with these recommended parameters. Replace &amp;lt;profile name&amp;gt; with your choice of minikube profile name.</description></item><item><title>Assessing and analyzing applications</title><link>http://konveyor.github.io/konveyor/assessanalyze/</link><pubDate>Tue, 14 Jun 2022 14:59:11 -0600</pubDate><guid>http://konveyor.github.io/konveyor/assessanalyze/</guid><description>Tackle core functions are assessing and analyzing the applications for migration and are performed on the Application inventory page. Assessing applications Follow the steps below to facilitate discussion of application migration.
Procedure
Click Application inventory in the left menu in the Development view. Click the checkbox to the left of the application being assessed. Note: Only one application can be assessed at a time.
Click the Assess button. Select the Stakeholders and Stakeholder groups from the drop-down lists to track who contributed to the assessment for future reference.</description></item><item><title>Adding applications</title><link>http://konveyor.github.io/konveyor/addapps/</link><pubDate>Tue, 14 Jun 2022 14:58:52 -0600</pubDate><guid>http://konveyor.github.io/konveyor/addapps/</guid><description>Applications can be added to Tackle by creating new applications from scratch manually or by importing them. Tackle applications are defined by manually entered and pre-defined attributes:
Name (manual) Description (manual) Business service (pre-defined) Tags (pre-defined) Source code Binary Creating a new application Follow the steps below to add a new application to the inventory for assessment and analysis.
Note: Before starting this procedure, it is helpful to set up business services, check tags and tag types, and create additions as needed.</description></item></channel></rss>