<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Move2Kube on Documentation for Konveyor projects</title><link>http://konveyor.github.io/move2kube/</link><description>Recent content in Move2Kube on Documentation for Konveyor projects</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 23 May 2022 18:00:01 +0530</lastBuildDate><atom:link href="http://konveyor.github.io/move2kube/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>http://konveyor.github.io/move2kube/overview/</link><pubDate>Fri, 08 Jul 2022 14:41:25 -0600</pubDate><guid>http://konveyor.github.io/move2kube/overview/</guid><description>The Move2Kube tool helps application owners migrate legacy workloads to run on Kubernetes clusters and eventually automate their deployments after multiple iterations. It analyzes Docker Compose files, Cloud Foundry manifest files, and even source code to generate Kubernetes deployment files including object YAML files, Helm charts, and operators.
Move2Kube has a very modular architecture making it easy to custom functionality for a large variety of migration use-cases.
The project includes three tools:</description></item><item><title>Concepts</title><link>http://konveyor.github.io/move2kube/concepts/</link><pubDate>Tue, 16 Aug 2022 17:21:40 -0600</pubDate><guid>http://konveyor.github.io/move2kube/concepts/</guid><description>Move2Kube has four concepts that are useful to understand when customizing output and this section covers the more important ones.
Important: If you have not followed the tutorials, we recommend checking those out first, then coming back here to see each concept in more detail.
Artifacts Source code
Artifacts represent the application objects that can be passed between transformers.
type Artifact struct { Name string `yaml:&amp;#34;name,omitempty&amp;#34; json:&amp;#34;name,omitempty&amp;#34;` Type ArtifactType `yaml:&amp;#34;type,omitempty&amp;#34; json:&amp;#34;type,omitempty&amp;#34;` ProcessWith metav1.</description></item><item><title>Commands</title><link>http://konveyor.github.io/move2kube/commands/</link><pubDate>Fri, 05 Aug 2022 11:13:15 -0600</pubDate><guid>http://konveyor.github.io/move2kube/commands/</guid><description>Move2Kube creates all resources required for deploying applications into Kubernetes including containerization and Kubernetes resources. It supports translating from Docker swarm/Docker-compose, Cloud Foundry, and other non-containerized applications. If the application does not use any of those or is not containerized, it can still be transformed by Move2Kube.
Note: Use these commands to view the options available in Move2Kube.
-h, --help help for move2kube --log-file string File to store the logs in.</description></item><item><title>Transformers</title><link>http://konveyor.github.io/move2kube/transformers/</link><pubDate>Fri, 05 Aug 2022 10:42:32 -0600</pubDate><guid>http://konveyor.github.io/move2kube/transformers/</guid><description>Move2Kube uses a suite of transformers to modify objects. To customize the output artifacts generated for a specific input, these transformers can be configured or new custom transformers can be created to achieve the required result. Transformer behavior and configuration is determined by the Transformer Class it uses. Though all the transformer classes are equal internally in Move2Kube, from a usage perspective, they are classified into three categories.
Purpose Built - Has a specific job and the customization allows for changing the parameters/configuration required for performing the specific job.</description></item></channel></rss>